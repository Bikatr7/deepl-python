# Note: This GitLab CI configuration is used for internal testing, users can ignore it.
include:
  - project: '${CI_PROJECT_NAMESPACE}/ci-libs-for-client-libraries'
    file:
      - '/${CI_PROJECT_NAME}/.gitlab-ci.yml'
      
# Global --------------------------

image: python:3.11

variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  XDG_CACHE_HOME: "${CI_PROJECT_DIR}/.cache"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  REQUESTS_CA_BUNDLE: "/etc/ssl/certs/ca-certificates.crt"
  
cache:
  key:
    prefix: ${CI_JOB_IMAGE}
    files:
      - pyproject.toml
      - poetry.lock
  paths:
    - .cache/pip
    - .venv

stages:
  - check
  - build
  - test
  - publish

before_script:
  - python3 -m venv .venv
  - source .venv/bin/activate
  - pip install --upgrade pip
  # Stick to Poetry 1.1.15, because with Poetry 1.2.0 there is a build issue on Python 3.6:
  # "pydantic-1.9.0-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl is not a supported wheel on this platform."
  # Note: Poetry and the project dependencies should also be installed in separate virtual-envs (that is not done here)
  - pip install poetry==1.1.15
  - poetry --version
  - poetry install -vv

# stage: check ----------------------

black:
  stage: check
  script: poetry run black --check .

flake8:
  stage: check
  script: poetry run flake8 deepl tests

# stage: build ----------------------

package:
  stage: build
  script:
    - poetry build --verbose --no-interaction
  artifacts:
    paths:
      - dist/

# stage: test -------------------------

test:
  stage: test
  extends: .test
  parallel:
    matrix:
      - DOCKER_IMAGE: "python:3.11"
      - DOCKER_IMAGE: "python:3.6"
        EXTRA_POETRY_ADD_ARGUMENT: "pytest@6.2.3 coverage@5.5"
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "python:3.7"
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "python:3.8"
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "python:3.9"
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "python:3.10"
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "python:3.11"
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "python:3.6"
        EXTRA_POETRY_ADD_ARGUMENT: "requests@2.0 pytest@6.2.3 coverage@5.5"
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "python:3.9"
        EXTRA_POETRY_ADD_ARGUMENT: "requests@2.0"
        USE_MOCK_SERVER: "use mock server"
      - DOCKER_IMAGE: "python:3.11"
        # Set minimum possible requests and urllib3 versions to work with Python 3.11
        EXTRA_POETRY_ADD_ARGUMENT: "requests@2.20 urllib3@1.23"
        USE_MOCK_SERVER: "use mock server"
  image: ${DOCKER_IMAGE}
  script:
    - >
      if [[ ! -z "${EXTRA_POETRY_ADD_ARGUMENT}" ]]; then
        echo "Running poetry add ${EXTRA_POETRY_ADD_ARGUMENT}"
        poetry add ${EXTRA_POETRY_ADD_ARGUMENT}
      fi
    - >
      if [[ ! -z "${USE_MOCK_SERVER}" ]]; then
        echo "Using mock server"
        export DEEPL_SERVER_URL=http://deepl-mock:3000
        export DEEPL_MOCK_SERVER_PORT=3000
        export DEEPL_PROXY_URL=http://deepl-mock:3001
        export DEEPL_MOCK_PROXY_SERVER_PORT=3001
      fi
    - poetry run coverage run -m pytest --junit-xml test_report.xml
    - poetry run coverage report
    - poetry run coverage xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit:
        - test_report.xml
    when: always

# stage: publish -------------------------

pypi upload:
  extends: .publish
  stage: publish
  dependencies:
    - package
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - poetry publish --verbose --no-interaction